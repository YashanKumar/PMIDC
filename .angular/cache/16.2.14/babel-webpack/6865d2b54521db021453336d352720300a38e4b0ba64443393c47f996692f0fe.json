{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/yashankumar/Desktop/ample-angular-16-dashboard-free/angular-16/src/app/component/state/state.component.ts"],"sourcesContent":["import { Component, OnInit} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {  SharedService } from '../shared/shared.service';\nimport { state } from '@angular/animations';\nimport { stateModel } from './state.model';\nimport {}\n\n@Component({\n  selector: 'app-state',\n  templateUrl: './state.component.html',\n  styleUrls: ['./state.component.scss']\n})\nexport class StateComponent implements OnInit{\n  StateDetails: any[] = [];\n  lastUsedId: number = 0; // Variable to store the last used ID\n\n  formValue !: FormGroup;\n  stateModelObj   : stateModel = new stateModel();\n  stateForm: any;\n  state: any;\n  refreshPage: any;\n  stateService: any;\n  router: any;\n  row: any;\n  //StateDetails: any;\n  constructor (private FormBuilder: FormBuilder,\n    private api :SharedService) { }\n   \n  ngOnInit(): void {\n    this.getStateDetails();\n    this.formValue = this.FormBuilder.group({\n      countryName : ['', Validators.required],\n      stateName : ['', [Validators.required, Validators.maxLength(150)]]\n    })\n    \n  }\n\n  \n\n  postStateDetails(){\n    debugger;\n    this.stateModelObj.id = ++this.lastUsedId; // Generate new ID\n    this.stateModelObj.countryName = this.formValue.value.countryName;\n    const country = this.stateModelObj.countryName ;\n     \n    if(country == \"\" || country == '0')\n      {\n           alert(\"Please Chose A Country\");\n      }\n    \n    this.stateModelObj.stateName = this.formValue.value.stateName;\n    const state = this.stateModelObj.stateName ;\n\n    if(state == \"\" || state == '0')\n      {\n           alert(\"Please Enter A State\");\n      }\n\n    this.api.postState(this.stateModelObj)\n    .subscribe(res=>{\n      console.log(res);\n      if(this.stateModelObj.stateName.length==0 || this.stateModelObj.stateName.trim()=== ''){\n        alert(\"State Name Cannot be null\")\n      }\n      else{\n      alert(\"State Added Successfully\")\n      this.getStateDetails()\n      this.formValue.reset()\n    }\n    },\n    err=>{\n      alert(\"something went wrong\")\n    })\n  }\n  \n\n    // getStateDetails(){\n    //   this.api.getstate()\n    //   .subscribe(res=>{\n    //     this.StateDetails = res;\n    //   });\n    // }\n\n    getStateDetails() {\n      this.api.getstate()\n        .subscribe((res: any) => { // Add type annotation to 'res'\n          const maxId = Math.max(...res.map((item: any) => item.id));\n          // Update lastUsedId to ensure generated IDs are unique\n          this.lastUsedId = maxId > 0 ? maxId : 0;\n          this.StateDetails = res;\n        });\n    }\n\n    cancel() {\n      const stateNameInput = document.getElementById('stateName') as HTMLInputElement;\n      stateNameInput.value = '';\n      const countryNameInput = document.getElementById('countryName') as HTMLInputElement;\n      countryNameInput.value = '';\n      this.router.navigate(['/dashboard']); // Redirect to '/dashboard' route\n    }\n  \n\n    // deleteState(row: any){\n    //   this.api.deletestate(row.id)\n    //   .subscribe((res: any)=>{\n    //     alert(\"State Deleted Successfully\");\n    //     // this.getStateDetails();\n    //     this.StateDetails = this.StateDetails.filter((state: any) => state.id !== row.id);\n    //   console.log(this.StateDetails);\n\n    //   })\n    // }\n\n    deleteState(id: number) {\n      this.api.deletestate(id)\n        .subscribe((res: any) => { // Add type annotation to 'res'\n          alert(\"State Deleted Successfully\");\n          this.StateDetails = this.StateDetails.filter((state: any) => state.id !== id);\n          \n        });\n    }\n\n    editState(id: number){\n      this.formValue.controls['stateName'].setValue(id);\n      this.stateModelObj.stateName = this.formValue.value.stateName;\n      this.api.editState(id)\n      .subscribe((res: any) => {\n        alert(\"updated successfully\");\n      });\n\n    }\n\n}\n\n\n\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}