{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { stateModel } from './state.model';\nlet StateComponent = class StateComponent {\n  //StateDetails: any;\n  constructor(FormBuilder, api) {\n    this.FormBuilder = FormBuilder;\n    this.api = api;\n    this.StateDetails = [];\n    this.lastUsedId = 0; // Variable to store the last used ID\n    this.stateModelObj = new stateModel();\n  }\n  ngOnInit() {\n    this.getStateDetails();\n    this.formValue = this.FormBuilder.group({\n      countryName: [null, Validators.required],\n      stateName: ['', [Validators.required, Validators.maxLength(150)]]\n    });\n  }\n  postStateDetails() {\n    debugger;\n    this.stateModelObj.id = ++this.lastUsedId; // Generate new ID\n    this.stateModelObj.countryName = this.formValue.value.countryName;\n    this.stateModelObj.stateName = this.formValue.value.stateName;\n    this.api.postState(this.stateModelObj).subscribe(res => {\n      console.log(res);\n      alert(\"State Added Successfully\");\n    }, err => {\n      alert(\"something went wrong\");\n    });\n  }\n  // getStateDetails(){\n  //   this.api.getstate()\n  //   .subscribe(res=>{\n  //     this.StateDetails = res;\n  //   });\n  // }\n  getStateDetails() {\n    this.api.getstate().subscribe(res => {\n      const maxId = Math.max(...res.map(item => item.id));\n      // Update lastUsedId to ensure generated IDs are unique\n      this.lastUsedId = maxId > 0 ? maxId : 0;\n      this.StateDetails = res;\n    });\n  }\n  // deleteState(row: any){\n  //   this.api.deletestate(row.id)\n  //   .subscribe((res: any)=>{\n  //     alert(\"State Deleted Successfully\");\n  //     // this.getStateDetails();\n  //     this.StateDetails = this.StateDetails.filter((state: any) => state.id !== row.id);\n  //   console.log(this.StateDetails);\n  //   })\n  // }\n  deleteState(id) {\n    this.api.deletestate(id).subscribe(res => {\n      alert(\"State Deleted Successfully\");\n      this.StateDetails = this.StateDetails.filter(state => state.id !== id);\n    });\n  }\n  editState(row) {\n    this.formValue.controls['stateName'].setValue(row.stateName);\n    this.api.editState(row).subscribe(res => {\n      alert(\"updated successfully\");\n    });\n  }\n};\nStateComponent = __decorate([Component({\n  selector: 'app-state',\n  templateUrl: './state.component.html',\n  styleUrls: ['./state.component.scss']\n})], StateComponent);\nexport { StateComponent };","map":{"version":3,"names":["Component","Validators","stateModel","StateComponent","constructor","FormBuilder","api","StateDetails","lastUsedId","stateModelObj","ngOnInit","getStateDetails","formValue","group","countryName","required","stateName","maxLength","postStateDetails","id","value","postState","subscribe","res","console","log","alert","err","getstate","maxId","Math","max","map","item","deleteState","deletestate","filter","state","editState","row","controls","setValue","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/yashankumar/Desktop/ample-angular-16-dashboard-free/angular-16/src/app/component/state/state.component.ts"],"sourcesContent":["import { Component, OnInit} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {  SharedService } from '../shared/shared.service';\nimport { state } from '@angular/animations';\nimport { stateModel } from './state.model';\n\n@Component({\n  selector: 'app-state',\n  templateUrl: './state.component.html',\n  styleUrls: ['./state.component.scss']\n})\nexport class StateComponent implements OnInit{\n  StateDetails: any[] = [];\n  lastUsedId: number = 0; // Variable to store the last used ID\n\n  formValue !: FormGroup;\n  stateModelObj   : stateModel = new stateModel();\nstateForm: any;\n  state: any;\n  refreshPage: any;\n  stateService: any;\n  //StateDetails: any;\n  constructor (private FormBuilder: FormBuilder,\n    private api :SharedService) { }\n   \n  ngOnInit(): void {\n    this.getStateDetails();\n    this.formValue = this.FormBuilder.group({\n      countryName : [null, Validators.required],\n      stateName : ['', [Validators.required, Validators.maxLength(150)]]\n    })\n    \n  }\n\n  \n\n  postStateDetails(){\n    debugger;\n    this.stateModelObj.id = ++this.lastUsedId; // Generate new ID\n    this.stateModelObj.countryName = this.formValue.value.countryName;\n    this.stateModelObj.stateName = this.formValue.value.stateName;\n\n    this.api.postState(this.stateModelObj)\n    .subscribe(res=>{\n      console.log(res);\n      alert(\"State Added Successfully\")\n    },\n    err=>{\n      alert(\"something went wrong\")\n    })\n  }\n\n    // getStateDetails(){\n    //   this.api.getstate()\n    //   .subscribe(res=>{\n    //     this.StateDetails = res;\n    //   });\n    // }\n\n    getStateDetails() {\n      this.api.getstate()\n        .subscribe((res: any) => { // Add type annotation to 'res'\n          const maxId = Math.max(...res.map((item: any) => item.id));\n          // Update lastUsedId to ensure generated IDs are unique\n          this.lastUsedId = maxId > 0 ? maxId : 0;\n          this.StateDetails = res;\n        });\n    }\n\n    // deleteState(row: any){\n    //   this.api.deletestate(row.id)\n    //   .subscribe((res: any)=>{\n    //     alert(\"State Deleted Successfully\");\n    //     // this.getStateDetails();\n    //     this.StateDetails = this.StateDetails.filter((state: any) => state.id !== row.id);\n    //   console.log(this.StateDetails);\n\n    //   })\n    // }\n\n    deleteState(id: number) {\n      this.api.deletestate(id)\n        .subscribe((res: any) => { // Add type annotation to 'res'\n          alert(\"State Deleted Successfully\");\n          this.StateDetails = this.StateDetails.filter((state: any) => state.id !== id);\n          \n        });\n    }\n\n    editState(row: any){\n      this.formValue.controls['stateName'].setValue(row.stateName);\n      this.api.editState(row)\n      .subscribe((res: any) => {\n        alert(\"updated successfully\");\n      });\n\n    }\n\n}\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}