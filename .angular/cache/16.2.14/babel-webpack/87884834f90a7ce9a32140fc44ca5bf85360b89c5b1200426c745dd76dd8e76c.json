{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { stateModel } from './state.model';\nlet StateComponent = class StateComponent {\n  //StateDetails: any;\n  constructor(FormBuilder, api) {\n    this.FormBuilder = FormBuilder;\n    this.api = api;\n    this.StateDetails = [];\n    this.lastUsedId = 0; // Variable to store the last used ID\n    this.stateModelObj = new stateModel();\n  }\n  ngOnInit() {\n    this.getStateDetails();\n    this.formValue = this.FormBuilder.group({\n      countryName: ['', Validators.required],\n      stateName: ['', [Validators.required, Validators.maxLength(150)]]\n    });\n  }\n  postStateDetails() {\n    debugger;\n    this.stateModelObj.id = ++this.lastUsedId; // Generate new ID\n    this.stateModelObj.countryName = this.formValue.value.countryName;\n    const country = this.stateModelObj.countryName;\n    if (country == \"\" || country == '0') {\n      alert(\"Please Chose A Country\");\n    }\n    this.stateModelObj.stateName = this.formValue.value.stateName;\n    const state = this.stateModelObj.stateName;\n    if (state == \"\" || state == '0') {\n      alert(\"Please Enter A State\");\n    }\n    this.api.postState(this.stateModelObj).subscribe(res => {\n      console.log(res);\n      if (this.stateModelObj.stateName.length == 0 || this.stateModelObj.stateName.trim() === '') {\n        alert(\"State Name Cannot be null\");\n      } else {\n        alert(\"State Added Successfully\");\n        this.getStateDetails();\n        this.formValue.reset();\n      }\n    }, err => {\n      alert(\"something went wrong\");\n    });\n  }\n  // getStateDetails(){\n  //   this.api.getstate()\n  //   .subscribe(res=>{\n  //     this.StateDetails = res;\n  //   });\n  // }\n  getStateDetails() {\n    this.api.getstate().subscribe(res => {\n      const maxId = Math.max(...res.map(item => item.id));\n      // Update lastUsedId to ensure generated IDs are unique\n      this.lastUsedId = maxId > 0 ? maxId : 0;\n      this.StateDetails = res;\n    });\n  }\n  cancel() {\n    const stateNameInput = document.getElementById('stateName');\n    stateNameInput.value = '';\n    const countryNameInput = document.getElementById('countryName');\n    countryNameInput.value = '';\n    this.router.navigate(['/dashboard']); // Redirect to '/dashboard' route\n  }\n  // deleteState(row: any){\n  //   this.api.deletestate(row.id)\n  //   .subscribe((res: any)=>{\n  //     alert(\"State Deleted Successfully\");\n  //     // this.getStateDetails();\n  //     this.StateDetails = this.StateDetails.filter((state: any) => state.id !== row.id);\n  //   console.log(this.StateDetails);\n  //   })\n  // }\n  deleteState(id) {\n    this.api.deletestate(id).subscribe(res => {\n      alert(\"State Deleted Successfully\");\n      this.StateDetails = this.StateDetails.filter(state => state.id !== id);\n    });\n  }\n  editing(id) {\n    // Call the API to get the details of the state with the provided ID\n    this.api.getDetailState(id).subscribe(state => {\n      console.log(\"State\", state);\n      // Populate the form with the retrieved state data\n      this.formValue.patchValue({\n        stateName: state\n      });\n      // Update the stateModelObj with the correct state name\n      this.stateModelObj.stateName = state;\n    }, error => {\n      console.error(\"Error fetching state details:\", error);\n    });\n  }\n};\nStateComponent = __decorate([Component({\n  selector: 'app-state',\n  templateUrl: './state.component.html',\n  styleUrls: ['./state.component.scss']\n})], StateComponent);\nexport { StateComponent };","map":{"version":3,"names":["Component","Validators","stateModel","StateComponent","constructor","FormBuilder","api","StateDetails","lastUsedId","stateModelObj","ngOnInit","getStateDetails","formValue","group","countryName","required","stateName","maxLength","postStateDetails","id","value","country","alert","state","postState","subscribe","res","console","log","length","trim","reset","err","getstate","maxId","Math","max","map","item","cancel","stateNameInput","document","getElementById","countryNameInput","router","navigate","deleteState","deletestate","filter","editing","getDetailState","patchValue","error","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/yashankumar/Desktop/ample-angular-16-dashboard-free/angular-16/src/app/component/state/state.component.ts"],"sourcesContent":["import { Component, OnInit} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {  SharedService } from '../shared/shared.service';\nimport { state } from '@angular/animations';\nimport { stateModel } from './state.model';\n\n\n@Component({\n  selector: 'app-state',\n  templateUrl: './state.component.html',\n  styleUrls: ['./state.component.scss']\n})\nexport class StateComponent implements OnInit{\n  StateDetails: any[] = [];\n  lastUsedId: number = 0; // Variable to store the last used ID\n  stateName: any;\n\n  formValue !: FormGroup;\n  stateModelObj   : stateModel = new stateModel();\n  stateForm: any;\n  state: any;\n  refreshPage: any;\n  stateService: any;\n  router: any;\n  row: any;\n  //StateDetails: any;\n  constructor (private FormBuilder: FormBuilder,\n    private api :SharedService) { }\n   \n  ngOnInit(): void {\n    this.getStateDetails();\n    this.formValue = this.FormBuilder.group({\n      countryName : ['', Validators.required],\n      stateName : ['', [Validators.required, Validators.maxLength(150)]]\n    })\n    \n  }\n\n  \n\n  postStateDetails(){\n    debugger;\n    this.stateModelObj.id = ++this.lastUsedId; // Generate new ID\n    this.stateModelObj.countryName = this.formValue.value.countryName;\n    const country = this.stateModelObj.countryName ;\n     \n    if(country == \"\" || country == '0')\n      {\n           alert(\"Please Chose A Country\");\n      }\n    \n    this.stateModelObj.stateName = this.formValue.value.stateName;\n    const state = this.stateModelObj.stateName ;\n\n    if(state == \"\" || state == '0')\n      {\n           alert(\"Please Enter A State\");\n      }\n\n    this.api.postState(this.stateModelObj)\n    .subscribe(res=>{\n      console.log(res);\n      if(this.stateModelObj.stateName.length==0 || this.stateModelObj.stateName.trim()=== ''){\n        alert(\"State Name Cannot be null\")\n      }\n      else{\n      alert(\"State Added Successfully\")\n      this.getStateDetails()\n      this.formValue.reset()\n    }\n    },\n    err=>{\n      alert(\"something went wrong\")\n    })\n  }\n  \n\n    // getStateDetails(){\n    //   this.api.getstate()\n    //   .subscribe(res=>{\n    //     this.StateDetails = res;\n    //   });\n    // }\n\n    getStateDetails() {\n      this.api.getstate()\n        .subscribe((res: any) => { // Add type annotation to 'res'\n          const maxId = Math.max(...res.map((item: any) => item.id));\n          // Update lastUsedId to ensure generated IDs are unique\n          this.lastUsedId = maxId > 0 ? maxId : 0;\n          this.StateDetails = res;\n        });\n    }\n\n    cancel() {\n      const stateNameInput = document.getElementById('stateName') as HTMLInputElement;\n      stateNameInput.value = '';\n      const countryNameInput = document.getElementById('countryName') as HTMLInputElement;\n      countryNameInput.value = '';\n      this.router.navigate(['/dashboard']); // Redirect to '/dashboard' route\n    }\n  \n\n    // deleteState(row: any){\n    //   this.api.deletestate(row.id)\n    //   .subscribe((res: any)=>{\n    //     alert(\"State Deleted Successfully\");\n    //     // this.getStateDetails();\n    //     this.StateDetails = this.StateDetails.filter((state: any) => state.id !== row.id);\n    //   console.log(this.StateDetails);\n\n    //   })\n    // }\n\n    deleteState(id: number) {\n      this.api.deletestate(id)\n        .subscribe((res: any) => { // Add type annotation to 'res'\n          alert(\"State Deleted Successfully\");\n          this.StateDetails = this.StateDetails.filter((state: any) => state.id !== id);\n          \n        });\n    }\n\n    editing(id: number){\n      // Call the API to get the details of the state with the provided ID\n      this.api.getDetailState(id).subscribe(\n        (state: any) => {\n          console.log(\"State\", state);\n    \n          // Populate the form with the retrieved state data\n          this.formValue.patchValue({\n            stateName: state\n          });\n    \n          // Update the stateModelObj with the correct state name\n          this.stateModelObj.stateName = state;\n        },\n        (error: any) => {\n          console.error(\"Error fetching state details:\", error);\n        }\n      );\n    }\n\n}\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}